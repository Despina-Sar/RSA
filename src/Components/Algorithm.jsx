/*import React, { useState } from 'react';
import { generateKeyPair, encrypt, decrypt } from './rsa';

function Home3() {
  const [message, setMessage] = useState('');
  const [encryptedMessage, setEncryptedMessage] = useState('');
  const [decryptedMessage, setDecryptedMessage] = useState('');

  const [publicKey, setPublicKey] = useState({});
  const [privateKey, setPrivateKey] = useState({});

  const handleGenerateKeys = () => {
    const { publicKey, privateKey } = generateKeyPair();
    setPublicKey(publicKey);
    setPrivateKey(privateKey);
    console.log("privateKey "+privateKey.d);
    console.log(privateKey);
    console.log("publicKey= "+publicKey);
  };

  const handleEncrypt = () => {
    const encrypted = encrypt(message, publicKey);
    setEncryptedMessage(encrypted);
  };

  const handleDecrypt = () => {
    const decrypted = decrypt(encryptedMessage, privateKey);
    setDecryptedMessage(decrypted);
  };

  return (
    <div>
      <h2>RSA Encryption and Decryption Simulation</h2>
      <div>
        <button onClick={handleGenerateKeys}>Generate Keys</button>
      </div>
      <div>
        <label>Public Key (e, n): ({publicKey.e}, {publicKey.n})</label>
        <br />
        <label>Private Key (d, n): ({privateKey.d}, {privateKey.n})</label>
      </div>
      <div>
        <input type="text" placeholder="Enter message" value={message} onChange={(e) => setMessage(e.target.value)} />
        <button onClick={handleEncrypt}>Encrypt</button>
      </div>
      <div>
        <label>Encrypted Message: {encryptedMessage}</label>
      </div>
      <div>
        <button onClick={handleDecrypt}>Decrypt</button>
      </div>
      <div>
        <label>Decrypted Message: {decryptedMessage}</label>
      </div>
    </div>
  );
}

export default Home3;
*/


import React, { useState} from 'react';
import JSEncrypt from 'jsencrypt';
import {Form} from 'react-bootstrap';
import TextareaAutosize from 'react-textarea-autosize';



function Home3() {
  const [message, setMessage] = useState('');
  const [publicKey, setPublicKey] = useState('');
  const [privateKey, setPrivateKey] = useState('');
  const [encryptedMessage, setEncryptedMessage] = useState('');
  const [decryptedMessage, setDecryptedMessage] = useState('');


  const [loading, setLoading] = useState(false);
  const generateKeys = () => {
    setLoading(true);
    const encrypt = new JSEncrypt({ default_key_size: 2048 });
    encrypt.getKey(() => {
      const publicKey = encrypt.getPublicKey();
      const privateKey = encrypt.getPrivateKey();
      setLoading(false);
      setPublicKey(publicKey);
      setPrivateKey(privateKey);
    });
  };

  const handleEncrypt = () => {
    const encrypt = new JSEncrypt();
    if (publicKey.length === 0) { alert("PublicKey is empty. Please generate keys in order to proceed to encryption");}
    else{
        encrypt.setPublicKey(publicKey);
        if (message.length === 0) { alert("Input Message is empty. Please give a text message to encrypt");}
        const encrypted = encrypt.encrypt(message);
        setEncryptedMessage(encrypted);
    }
  };

  const handleDecrypt = () => {
    const decrypt = new JSEncrypt();
    decrypt.setPrivateKey(privateKey);
    if (encryptedMessage.length === 0) {alert("Encrypted Message Message is empty.");}
    const decrypted = decrypt.decrypt(encryptedMessage);
    setDecryptedMessage(decrypted);
  };


  const [value, setValue] = useState('');

  const handleChange = (event) => {
    setValue(event.target.value);
  };



return (
    <div className ="body">
      <h5>RSA Calculator</h5>
      <div>
        <button className= "button" onClick={generateKeys} disabled={loading}>
        {loading ? 'Loading...' : 'Create Keys'}
      </button>

        
          <h6>Public Key:</h6>
          
          {/* 
          <p>{publicKey}</p>
          <Form.Control 
            className="custom-input" 
            type="text"
            placeholder={(publicKey)}
            aria-label="Disabled input example"
            disabled
            readOnly
            component={TextareaAutosize}
             />   
            */}     
        </div>   
      
        <div style={{ display: 'flex', justifyContent: 'left', alignItems: 'center',marginLeft: '50px', marginBottom: '10px'}}>
        <div style={{ background: 'white', padding: '20px', borderRadius: '10px', maxWidth: '70%', width: 'auto' }}>
                <p style={{ color: '#333', margin: 0}}> {(publicKey || "Public Key will be autogenerated")}</p>
        </div>
      </div>
      
      <h6>Private Key:</h6>
          
      <div style={{ display: 'flex', justifyContent: 'left', alignItems: 'center',marginLeft: '50px' , marginBottom: '10px'}}>
        <div style={{ background: 'white', padding: '20px', borderRadius: '10px', maxWidth: '70%', width: 'auto' }}>
                <p style={{ color: '#333',margin: 0 }}> {(privateKey || "Private Key will be autogenerated")}</p>
        </div>
      </div>

      <h6>Please enter Message to encrypt: </h6>
      <Form.Control
               className="custom-input" 
                type="text"
                placeholder="Enter Message"
                onChange={(e) => setMessage(e.target.value)}
              />


      
      <button className= "button"  variant="outline-dark" onClick={handleEncrypt}>Encrypt</button>
      <div>
        <h6>Encrypted Message:</h6>
       <div style={{ display: 'flex', justifyContent: 'left', alignItems: 'center' ,marginLeft: '50px', marginBottom: '10px'}}>
        <div style={{ background: 'white', padding: '20px', borderRadius: '10px', maxWidth: '70%', width: 'auto' }}>
                <p style={{ color: '#333',margin: 0,wordBreak: 'break-all' }}> {(encryptedMessage || "Encrypted message will be autogenerated")}</p>
        </div>
      </div>

        
       <button className= "button"  variant="outline-dark" onClick={handleDecrypt}>Decrypt</button>
      </div>
      
        <h6>Decrypted Message: {decryptedMessage}</h6>
        <p>{decryptedMessage}</p>
      </div>
  );
}

export default Home3;
